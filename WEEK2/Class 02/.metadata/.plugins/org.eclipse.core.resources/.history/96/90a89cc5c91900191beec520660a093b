package bagpractice;import java.util.Arrays;/** * A class that implements a bag of objects by using an array. The bag is never * full. *  * @author Frank M. Carrano * @author Timothy M. Henry * @version 4.0 *  *          This is actually from Chapter 2, ResizableArrayBag. Just included to *          make the implementations work. (MWH) */public final class Bag_answer<T> implements BagInterface<T> {	private T[] bag; // Cannot be final due to doubling	private int numberOfEntries;	private boolean initialized = false;	private static final int DEFAULT_CAPACITY = 25; // Initial capacity of bag	private static final int MAX_CAPACITY = 10000;	/** Creates an empty bag whose initial capacity is 25. */	public Bag_answer() {		this(DEFAULT_CAPACITY);	} // end default constructor	/**	 * Creates an empty bag having a given initial capacity.	 * 	 * @param initialCapacity The integer capacity desired.	 */	public Bag_answer(int initialCapacity) {		} // end constructor	/**	 * Creates a bag containing given entries.	 * 	 * @param contents An array of objects.	 */	public Bag_answer(T[] contents) {			} // end constructor	/**	 * Adds a new entry to this bag.	 * 	 * @param newEntry The object to be added as a new entry.	 * @return True.	 */	public boolean add(T newEntry) {			} // end add	/**	 * Retrieves all entries that are in this bag.	 * 	 * @return A newly allocated array of all the entries in this bag.	 */	public T[] toArray() {			} // end toArray	/**	 * Sees whether this bag is empty.	 * 	 * @return True if this bag is empty, or false if not.	 */	public boolean isEmpty() {		} // end isEmpty	/**	 * Gets the current number of entries in this bag.	 * 	 * @return The integer number of entries currently in this bag.	 */	public int getCurrentSize() {		} // end getCurrentSize	/**	 * Counts the number of times a given entry appears in this bag.	 * 	 * @param anEntry The entry to be counted.	 * @return The number of times anEntry appears in this ba.	 */	public int getFrequencyOf(T anEntry) {			} // end getFrequencyOf	/**	 * Tests whether this bag contains a given entry.	 * 	 * @param anEntry The entry to locate.	 * @return True if this bag contains anEntry, or false otherwise.	 */	public boolean contains(T anEntry) {			} // end contains	/** Removes all entries from this bag. */	public void clear() {			} // end clear	/**	 * Removes one unspecified entry from this bag, if possible.	 * 	 * @return Either the removed entry, if the removal was successful, or null.	 */	public T remove() {			} // end remove	/**	 * Removes one occurrence of a given entry from this bag.	 * 	 * @param anEntry The entry to be removed.	 * @return True if the removal was successful, or false if not.	 */	public boolean remove(T anEntry) {			} // end remove	// Locates a given entry within the array bag.	// Returns the index of the entry, if located,	// or -1 otherwise.	// Precondition: checkInitialization has been called.	private int getIndexOf(T anEntry) {			} // end getIndexOf	// Removes and returns the entry at a given index within the array.	// If no such entry exists, returns null.	// Precondition: 0 <= givenIndex < numberOfEntries.	// Precondition: checkInitialization has been called.	private T removeEntry(int givenIndex) {		} // end removeEntry	// Returns true if the array bag is full, or false if not.	private boolean isArrayFull() {		} // end isArrayFull	// Doubles the size of the array bag.	// Precondition: checkInitialization has been called.	private void doubleCapacity() {		} // end doubleCapacity	// Throws an exception if the client requests a capacity that is too large.	private void checkCapacity(int capacity) {		if (capacity > MAX_CAPACITY)			throw new IllegalStateException(					"Attempt to create a bag whose capacity exceeds " + "allowed maximum of " + MAX_CAPACITY);	} // end checkCapacity	// Throws an exception if receiving object is not initialized.	private void checkInitialization() {		if (!initialized)			throw new SecurityException("Uninitialized object used " + "to call an ArrayBag method.");	} // end checkInitialization} // end ResizableArrayBag