package lab3;
import java.util.Vector;

/**
 * A class of stacks whose entries are stored in a vector.
 * 
 * @author Frank M. Carrano and Timothy M. Henry
 * @version 5.0
 */
public final class VectorStack<T> implements StackInterface<T> {
	private Vector<T> stack; // Last element is the top entry in stack
	private boolean integrityOK;
	private static final int DEFAULT_CAPACITY = 50;
	private static final int MAX_CAPACITY = 10000;

	public VectorStack() {
		this(DEFAULT_CAPACITY);
	} // end default constructor

	public VectorStack(int initialCapacity) {
		integrityOK = false;
		checkCapacity(initialCapacity);
		stack = new Vector<>(initialCapacity); // Size doubles as needed
		integrityOK = true;
	} // end constructor

	// Throws an exception if this object is not initialized.
	private void checkIntegrity() {
		if (!integrityOK)
			throw new SecurityException("VectorStack object is corrupt.");
	} // end checkIntegrity

	// Throws an exception if the client requests a capacity that is too large.
	private void checkCapacity(int capacity) {
		if (capacity > MAX_CAPACITY)
			throw new IllegalStateException(
					"Attempt to create a stack " + "whose capacity exceeds " + "allowed maximum.");
	} // end checkCapacity

	@Override
	public void push(T newEntry) {
		stack.add(newEntry);
	}

	@Override
	public T pop() {
		T result = null;
		int lastIndex = stack.size() - 1;
		while(lastIndex > -1){
			result = stack.get(lastIndex);
		}
		return result;
	}

	@Override
	public T peek() {
		T result = null;
		int lastIndex = stack.size() - 1;
		if(lastIndex > -1)
			result = stack.get(lastIndex);
		return result;
	}

	@Override
	public boolean isEmpty() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void clear() {
		// TODO Auto-generated method stub

	}

//  < Implementations of stack methods go here
//  . . .

} // end VectorStack
