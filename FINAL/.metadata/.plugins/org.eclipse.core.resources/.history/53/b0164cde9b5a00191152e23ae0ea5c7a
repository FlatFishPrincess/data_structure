package TreePackage;

import java.util.Iterator;
import java.util.NoSuchElementException;
import StackAndQueuePackage.*; // Needed by tree iterators

/**
 * A class that implements the ADT binary tree.
 * 
 * @author Frank M. Carrano
 * @author Timothy M. Henry
 * @version 5.0
 */
public class BinaryTree<T> implements BinaryTreeInterface<T> {
	private BinaryNode<T> root;

	public BinaryTree() {
		root = null;
	} // end default constructor

	/**
	 * Create the tree with a single root node from data
	 * 
	 * @param rootData
	 */
	public BinaryTree(T rootData) {
		root = new BinaryNode<>(rootData);
	} // end constructor

	/**
	 * Create the tree from a new root node and two other trees that will now become
	 * subtrees from root.
	 * 
	 * @param rootData
	 * @param leftTree
	 * @param rightTree
	 */
	public BinaryTree(T rootData, BinaryTree<T> leftTree, BinaryTree<T> rightTree) {
		initializeTree(rootData, leftTree, rightTree);
	} // end constructor

	public void setTree(T rootData, BinaryTreeInterface<T> leftTree, BinaryTreeInterface<T> rightTree) {
		initializeTree(rootData, (BinaryTree<T>) leftTree, (BinaryTree<T>) rightTree);
	} // end setTree

	/**
	 * Combine two subtrees into a single tree with a new root.
	 * 
	 * @param rootData
	 * @param leftTree
	 * @param rightTree
	 */
	private void initializeTree(T rootData, BinaryTree<T> leftTree, BinaryTree<T> rightTree) {
		// < FIRST DRAFT - See Segments 25.4 - 25.7 for improvements. >
		root = new BinaryNode<T>(rootData);

		if (leftTree != null)
			root.setLeftChild(leftTree.root);

		if (rightTree != null)
			root.setRightChild(rightTree.root);
	} // end initializeTree

	@Override
	public T getRootData() {
		return root.getData();
	}

	/**
	 * @return the root
	 */
	public BinaryNode<T> getRootNode() {
		return root;
	}

	protected void setRootNode(BinaryNode<T> rootNode) {
		root = rootNode;
	}

	@Override
	public int getHeight() {
		return getHeight(root);
	}
	
	private int getHeight(BinaryNode<T> node){
//		int height = 0;
//		if(node != null) {
//			int leftHeight = 1 + getHeight(node.getLeftChild());
//			int rightHeight = 1 + getHeight(node.getRightChild());
//			height = Math.max(leftHeight, rightHeight);
//		}
//		return height;
		return root.getHeight();
	}

	@Override
	public int getNumberOfNodes() {
		return root.getNumberOfNodes();
	}

	@Override
	public boolean isEmpty() {
		return root == null;
	}

	@Override
	public void clear() {
		root = null;
	}

	@Override
	public Iterator<T> getPreorderIterator() {
		return new PreporderIterator();	
	}
	
	private class PreporderIterator<T> implements Iterator<T>{
		 private StackInterface<BinaryNode<T>> stack;
		 
		 public PreporderIterator(){
			stack = new LinkedStack<>();
			stack.push((BinaryNode<T>) root);
		 }
		 
		 public boolean hasNext(){
			return !stack.isEmpty();
		 }
		 
		 public T next(){
			BinaryNode<T> rootNode = stack.pop();
			if(rootNode.getRightChild() != null)
				stack.push(rootNode.getRightChild());
			if(rootNode.getLeftChild() != null)
				stack.push(rootNode.getLeftChild());
			return rootNode.getData();
		 }
	}

	@Override
	public Iterator<T> getPostorderIterator() {
		return new PostOrderIterator();
	}
	
	private class PostOrderIterator<T> implements Iterator<T>{
		 private StackInterface<BinaryNode<T>> stack;
		 private BinaryNode<T> currentNode;
		 
		 public PostOrderIterator(){
			 stack = new LinkedStack<>();
			 currentNode = (BinaryNode<T>) root;
		 }
		 
		 public boolean hasNext(){
			 return !stack.isEmpty() || currentNode != null;
		 }
		 
		 public T next(){
			 BinaryNode<T> leftChild, rightChild, poppedNode = null;
			 
			 // find the leftmost leaf
			 while(currentNode != null){
				 stack.push(currentNode);
				 leftChild = currentNode.getLeftChild(); 
				 currentNode = leftChild;
			 }
			 
			 if(!stack.isEmpty()){
				 poppedNode = stack.pop();
				 BinaryNode<T> parent = stack.peek();
				 if(parent.getLeftChild().equals(poppedNode)){
					 currentNode = parent.getRightChild();
				 } else {
					 currentNode = null;
				 }
			 }
			 return poppedNode.getData();
		 }
	}


	@Override
	public Iterator<T> getInorderIterator() {
		return new InOrderIterator();
	}
	
	private class InOrderIterator<T> implements Iterator<T>{
		private StackInterface<BinaryNode<T>> stack;
		private BinaryNode<T> currentNode;
		
		 public InOrderIterator(){
			stack = new LinkedStack<>();
			currentNode = (BinaryNode<T>) root;
		 }
		 
		 public boolean hasNext(){
			return !stack.isEmpty() || currentNode != null;
		 }
		 
		 public T next(){
			 // get leftMost leaf
			 while(currentNode != null){
				 stack.push(currentNode);
				 currentNode = currentNode.getLeftChild();
			 }
			 BinaryNode<T> poppedNode = stack.pop();
			 currentNode = poppedNode.getRightChild();
			 return poppedNode.getData();
		 }
			 
	}

	@Override
	public Iterator<T> getLevelOrderIterator() {
		return new LevelOrderIterator();
	}
	
	private class LevelOrderIterator<T> implements Iterator<T>{
		 private QueueInterface<BinaryNode<T>> queue;
		 private BinaryNode<T> currentNode;
		 
		 public LevelOrderIterator(){
			queue = new LinkedQueue<BinaryNode<T>>();
			if (root != null)
			   queue.enqueue((BinaryNode<T>) root);
		 }
		 
		 public boolean hasNext(){
			 return !queue.isEmpty();
		 }
		 
		 public T next(){
			 BinaryNode<T> nextNode = null;
			 if(hasNext()){
				 nextNode = queue.dequeue();
			 }
			 // get left and right child 
			 BinaryNode<T> right, left;
			 right = nextNode.getRightChild();
			 left = nextNode.getLeftChild();
			 
			 if(left != null)
				 queue.enqueue(left);
			 if(right != null)
				 queue.enqueue(right);
			 return nextNode.getData();
		 }
	}

	@Override
	public void setRootData(T rootData) {
		root.setData(rootData);
	}

	/*
	 * Implementations of setRootData, getRootData, getHeight, getNumberOfNodes,
	 * isEmpty, clear, and the methods specified in TreeIteratorInterface are here.
	 * . . .
	 */

} // end BinaryTree
