/**
 * A player in the game of war.
 * The player is initialized with a name, which is used to identify the player in output 
 * @author mhrybyk
 *
 */
public class Player implements PlayerInterface {

	private static final int PLAYER_CARDS = 26;

	private String name;  // name of the player
	
	// each player has three decks
	// cardsToPlay - the cards to be used to play war, chosen one at a time
	// cardsWon - storage for all cards won in each battle
	
	private Deck cardsToPlay = new Deck("[CardsToPlay]");
	private Deck cardsWon = new Deck("[CardsWon]");
	private Deck war = new Deck("[War]");
	
	public Player(String name) {
		this.name = name;
	}
	
	@Override
	public String toString() {
		return name + " " + cardsToPlay.size() + 
				"-" + cardsWon.size() +
				"-" + war.size();
	}


	@Override
	public void addCardToPlay(Card card) {
		cardsToPlay.push(card);
	}


	@Override
	public Card getCardToPlay() {
		// if cardsToPlay is empty, then move all cardsWon to cardsToPlay 
		// but if cardsWon is empty, lose 
		if(cardsToPlay.isEmpty()){
			System.out.println("move cards won to cardstoplay");
			for(int i =0; i<cardsWon.size(); i++)
				cardsToPlay.push(cardsWon.pop());
		}
		return cardsToPlay.pop();
	}


	@Override
	public void addWonCard(Card card) {
		cardsWon.push(card);
	}


	@Override
	public boolean declareWar(Card playedCard) {
		return false;
	}


	@Override
	public void lostWarTo(Player otherPlayer) {
		
	}


	@Override
	public void wonWar() {
		
	}


	@Override
	public void displayCardsToPlay() {
		for(int i =0; i<cardsToPlay.size(); i++){
			cardsToPlay.display(name);
		}
	}


	@Override
	public void displayCardsWon() {
		
	}


	@Override
	public void displayWar() {
		
	}

}
