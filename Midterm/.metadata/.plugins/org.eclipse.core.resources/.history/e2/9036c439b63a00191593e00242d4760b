/**
 * A class of stacks whose entries are stored in an array.
 * 
 * @author Frank M. Carrano and Timothy M. Henry
 * @version 5.0
 */


public class ArrayStack3<T> implements StackInterface<T> {
	private T[] stack; // Array of stack entries
	private int topIndex; // Index of top entry
	private static final int DEFAULT_CAPACITY = 100;

	public ArrayStack3() {
		this(DEFAULT_CAPACITY);
	} // end default constructor

	public ArrayStack3(int initialCapacity) {
		T[] tempArr = (T[]) new Object[initialCapacity];
		stack = tempArr;
		topIndex = -1;
	} // end constructor

	@Override
	public void push(T newEntry) {
		stack[topIndex + 1] = newEntry;
		topIndex++;
	}

	@Override
	public T pop() {
		T result = peek();
		topIndex--;
		return result;
	}

	@Override
	public T peek() {
		return stack[topIndex];
	}

	@Override
	public boolean isEmpty() {
		return topIndex == -1;
	}

	@Override
	public void clear() {
		stack = null;
		topIndex = -1;
	}

	@Override
	public int size() {
		return topIndex + 1;
	}
	
	/**
	 * Display all elements in a stack.
	 * Begin with the title followed by the stack size.
	 * Then display each stack element using the toString() method 
	 * of the element.
	 * @param title title to display ahead of list of elements
	 */
	public void display(String title) {
		int stackSize = size();
		System.out.println("===================");
		System.out.println(title + " size " + stackSize);
		for (int i = 0; i < stackSize; i++) {
			System.out.println(stack[i]);
		}

		System.out.println("===================");
	}
	
	public T[] toArray(){
		T[] stackCopy = stack;
		// .. should use toArray not display
		for(int i = 0; i< size(); i++){
			stackCopy[i] = stack[i];
		}
		return stackCopy;
	}
} // end ArrayStack
