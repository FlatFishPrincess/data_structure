/**
 * A class that implements a queue of objects by using an array.
 * 
 * @author Frank M. Carrano
 * @author Timothy M. Henry
 * @version 5.0
 */
public final class ArrayQueue<T> implements QueueInterface<T> {
	private T[] queue; // Circular array of queue entries and one unused element
	private int frontIndex;
	private int backIndex;
	private boolean integrityOK;
	private static final int DEFAULT_CAPACITY = 50;
	private static final int MAX_CAPACITY = 10000;

	public ArrayQueue() {
		this(DEFAULT_CAPACITY);
	} // end default constructor

	public ArrayQueue(int initialCapacity) {
		integrityOK = false;
		checkCapacity(initialCapacity);

		// The cast is safe because the new array contains null entries
		@SuppressWarnings("unchecked")
		T[] tempQueue = (T[]) new Object[initialCapacity + 1];
		queue = tempQueue;
		frontIndex = 0;
		backIndex = initialCapacity;
		integrityOK = true;
	} // end constructor

	private void checkCapacity(int initialCapacity) {
		
	}

	@Override
	public void enqueue(T newEntry) {
	   backIndex = (backIndex + 1) % queue.length;
	   queue[backIndex] = newEntry;
	}

	@Override
	public T dequeue() {
		 if (isEmpty())
		      throw new EmptyQueueException();
		   else
		   {
		      T front = queue[frontIndex];
		      queue[frontIndex] = null;
		      frontIndex = (frontIndex + 1) % queue.length;
		      return front;
		   } // end if
	}

	@Override
	public T getFront() {
		if (isEmpty())
		      throw new EmptyQueueException();
		   else
		      return queue[frontIndex];
	}

	@Override
	public boolean isEmpty() {
		 return frontIndex == ((backIndex + 1) % queue.length);
	}

	@Override
	public void clear() {
		

	}

//  < Implementations of the queue operations go here. >
//  . . .

} // end ArrayQueue
