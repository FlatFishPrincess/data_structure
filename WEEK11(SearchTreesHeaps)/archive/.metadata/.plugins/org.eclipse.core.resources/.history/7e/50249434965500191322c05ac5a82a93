package HeapPackage;

import java.util.Arrays;

/**
 * A class that implements the ADT maxheap by using an array.
 * 
 * @author Frank M. Carrano
 * @author Timothy M. Henry
 * @version 5.0
 */
public final class MaxHeap<T extends Comparable<? super T>> implements MaxHeapInterface<T> {
	private T[] heap; // Array of heap entries; ignore heap[0]
	private int lastIndex; // Index of last entry and number of entries

	private static final int DEFAULT_CAPACITY = 25;
	private static final int MAX_CAPACITY = 10000;

	public MaxHeap() {
		this(DEFAULT_CAPACITY); // Call next constructor
	} // end default constructor

	public MaxHeap(int initialCapacity) {
		// Is initialCapacity too small?
		if (initialCapacity < DEFAULT_CAPACITY)
			initialCapacity = DEFAULT_CAPACITY;
		else // Is initialCapacity too big?
			checkCapacity(initialCapacity);

		// The cast is safe because the new array contains null entries
		@SuppressWarnings("unchecked")
		T[] tempHeap = (T[]) new Comparable[initialCapacity + 1];
		heap = tempHeap;
		lastIndex = 0;
	} // end constructor


	private void checkCapacity(int initialCapacity) {
		
	}

	public void add(T newEntry) {
		int newIndex = lastIndex + 1;
		int parentIndex = newIndex / 2; // parent is always halfway up
		while ((parentIndex > 0) && newEntry.compareTo(heap[parentIndex]) > 0) {
		// newEntry is larger than the parent, so move the parent to the leaf node or vacancy
			heap[newIndex] = heap[parentIndex];
			// vacancy is now where the parent previously existed
			newIndex = parentIndex;
			// go to the next parent up the tree
			parentIndex = newIndex / 2;
	    } // end while

		// place the entry in the vacancy/leaf and bump the last index (last node of the tree)
	   heap[newIndex] = newEntry;
	   lastIndex++;
//	   ensureCapacity();
	} // end add

	public T removeMax() {
		T root = null;
	   if (!isEmpty())
	   {
	      root = heap[1];            // Return value
	      heap[1] = heap[lastIndex]; // Form a semiheap
	      lastIndex--;               // Decrease size
	      reheap(1);                 // Transform to a heap
	   } // end if
		  return root;
	} // end removeMax
	
	private void reheap(int rootIndex){
		boolean done = false;
		T orphan = heap[rootIndex];
		int leftChildIndex = 2 * rootIndex;
		while (!done && (leftChildIndex <= lastIndex)) {
			// larger child is always the left one
			int largerChildIndex = leftChildIndex;
			// right child is one position more than the left
			int rightChildIndex = leftChildIndex + 1;
			// set the larger child to the right child if the right child is larger
			if ((rightChildIndex <= lastIndex) 
					&& heap[rightChildIndex].compareTo(heap[largerChildIndex]) > 0) { 
				largerChildIndex = rightChildIndex;
			}
			// now compare our orphan to the largest child.
			// if the orphan is smaller, move the larger child to the root, // and adjust the rootIndex to be the larger child
			// then look at the next left child and start over
			// if orphan is the same or larger, then we are done
			if (orphan.compareTo(heap[largerChildIndex]) < 0) { 
				heap[rootIndex] = heap[largerChildIndex]; 
				rootIndex = largerChildIndex; 
				leftChildIndex = 2 * rootIndex;
			} else
			done = true;
		} // end while
		
		heap[rootIndex] = orphan;
	}

	public T getMax() {
		T root = null;
		if (!isEmpty())
			root = heap[1];
		return root;
	} // end getMax

	private void checkIntegrity() {
		// TODO Auto-generated method stub
		
	}

	public boolean isEmpty() {
		return lastIndex < 1;
	} // end isEmpty

	public int getSize() {
		return lastIndex;
	} // end getSize

	public void clear() {
		while (lastIndex > -1) {
			heap[lastIndex] = null;
			lastIndex--;
		} // end while
		lastIndex = 0;
	} // end clear

	public void display() {
		for(T t: heap){
			System.out.println(t);
		}
	}

} // end MaxHeap
