import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.NoSuchElementException;


//import HashedDictionary.Entry;

/**
 * A class that implements the ADT dictionary by using hashing and linear
 * probing to resolve collisions. The dictionary is unsorted and has distinct
 * search keys. Notes: Uses probe for add, remove, and getValue. Uses linear
 * probing, but includes code for quadratic probing. Has a display method for
 * illustration and testing.
 * 
 * @author Frank M. Carrano
 * @author Timothy M. Henry
 * @version 5.0
 */
public class HashedDictionary<K, V> implements DictionaryInterface<K, V> {


	// The dictionary:
	private int numberOfEntries;
	
	// capacity must be prime, which checkCapacity will automatically set
	// if this is set too low with quadratic probe, search time increases.
	private static final int DEFAULT_CAPACITY = 5; 
	private static final int MAX_CAPACITY = 1000000;

	// The hash table:
	private Entry<K, V>[] hashTable;

	private static final int MAX_SIZE = 2 * MAX_CAPACITY; // Max size of hash table
	private static final double MAX_LOAD_FACTOR = 0.5; // Fraction of hash table that can be filled
	
	private final Entry<K, V> AVAILABLE = new Entry<>(null, null); // Occupies locations in the hash table in the
																	// available state (locations whose entries were
																	// removed)

	public HashedDictionary() {
		this(DEFAULT_CAPACITY); // Call next constructor
	} // end default constructor

	public HashedDictionary(int initialCapacity) {
		initialCapacity = checkCapacity(initialCapacity);
		numberOfEntries = 0; // Dictionary is empty

		// Set up hash table:
		// Initial size of hash table is same as initialCapacity if it is prime;
		// otherwise increase it until it is prime size
		int tableSize = getNextPrime(initialCapacity);
		checkSize(tableSize); // Check that the prime size is not too large

		// The cast is safe because the new array contains null entries
		@SuppressWarnings("unchecked")
		Entry<K, V>[] temp = (Entry<K, V>[]) new Entry[tableSize];
		hashTable = temp;

	} // end constructor


	/**
	 * Display the hash table. Should really be done in a utility function with some other methods
	 * to determine state. Just for illustration
	 */
	public void displayHashTable() {
		System.out.println("***** Displaying hash table size = " + hashTable.length + ":");
		for (int index = 0; index < hashTable.length; index++) {
			
			Entry<K, V> entry = hashTable[index];
			if (entry == null)
				System.out.println("null ");
			else if (entry == AVAILABLE)
				System.out.println("removed state");
			else {
				K key = entry.getKey();
				V value = entry.getValue();
				int hashIndex = getHashIndex(key);			
				System.out.println("index " + hashIndex + " (" + (hashIndex % hashTable.length) + ") key " + key + " " + value);
			}
		} // end for
		System.out.println();
	} 

	@Override
	public V add(K key, V value) {
		if ((key == null) || (value == null))
			throw new IllegalArgumentException("Cannot add null to a dictionary.");
		else {
			V oldValue; // Value to return
			// get the next available hash index for the key
			int index = getHashIndex(key);
			if (!hasAnEntry(index)) { // Key not found, so insert new entry 
				hashTable[index] = new Entry<>(key, value);
				numberOfEntries++;
				oldValue = null;
			} else { // Key found; get old value for return and then replace it
				oldValue = hashTable[index].getValue(); 
				hashTable[index].setValue(value);
			} // end if
			
			// Ensure that hash table is large enough for another add
			if (isHashTableTooFull()) 
				enlargeHashTable();
			return oldValue;
		}
	}

	@Override
	public V remove(K key) {
		V removedValue = null;
		int index = getHashIndex(key); // get the location in the table
		if (hasAnEntry(index)) {
			// Key found; flag entry as removed and return its value
			removedValue = hashTable[index].getValue();
			hashTable[index] = null;
			numberOfEntries--;
		}
		return removedValue;
	}

	@Override
	public V getValue(K key) {
		V result = null;
		int index = getHashIndex(key); 
		if (hasAnEntry(index))
			result = hashTable[index].getValue(); // Key found; get value return result;
		return result;
	}

	@Override
	public boolean contains(K key) {
		boolean found = false;
		for (Entry<K, V> entry : hashTable) {
			if(entry != null){
				if(entry.getKey().equals(key)){
					found = true;
					break;
				}
			}
		}
		return found;
	}

	@Override
	public boolean isEmpty() {
		return numberOfEntries == 0;
	}

	@Override
	public int getSize() {
		return numberOfEntries;
	}

	@Override
	public void clear() {
		@SuppressWarnings("unchecked")
		Entry<K, V>[] temp = (Entry<K, V>[]) new Entry[DEFAULT_CAPACITY];
		hashTable = temp;
		numberOfEntries = 0;
	}

	
	
	@Override
	public Iterator<K> getKeyIterator() {
		Iterator<K> keyIterator;
		Collection<K> keyList = new ArrayList<K>();
		for(Entry<K, V> entry : hashTable){
			if(entry != null){
				K key = entry.getKey();
				if(key != null)
					keyList.add(key);
			}
		}
		keyIterator = (Iterator<K>) keyList.iterator();
		return keyIterator;
	}

	@Override
	public Iterator<V> getValueIterator() {
		Iterator<V> valueIterator;
		Collection<V> valueList = new ArrayList<V>();
		for(Entry<K, V> entry : hashTable){
			if(entry != null){
				V value = entry.getValue();
				valueList.add(value);
			}
		}
		valueIterator = (Iterator<V>) valueList.iterator();
		return valueIterator;
	}
	
	/**
	 * Checks to see if the index into the hash table is occupied
	 * @param index
	 * @return true if there is an entry
	 */
	public boolean hasAnEntry(int index) {
		return (hashTable[index] != null) && (hashTable[index] != AVAILABLE);
	}

	/**
	 * Get the next available hash index for the key
	 * @param key
	 * @return
	 */
	private int getHashIndex(K key) {
		int hashIndex = setHashIndex(key.hashCode());

		// Check for and resolve collision
		hashIndex = linearProbe(hashIndex, key);

		return hashIndex;
	} 


	/**
	 * Take a hashcode and make sure it fits in the hash table.
	 * Wraparound if necessary using mod tablelength.
	 * If the resulting index is < 0, add the table length to it.
	 * @param index
	 * @return index % tablelength
	 */
	private int setHashIndex(int index) {
		index = index % hashTable.length;
		if(index < 0)
			index = index + hashTable.length;
		
		return index;
	}
	
	/**
	 * Probe the array for key or failing that, the next unused location
	 * 
	 * The index should be generated by a hash code % dictionarySize
	 * 
	 * Use linear probing
	 * @param index
	 * @param key
	 * @return
	 */
	private int linearProbe(int index, K key) {
		 boolean found = false;
		 int availableStateIndex = -1; // Index of first element in available state
		  while ( !found && (hashTable[index] != null) ){
		      if (hashTable[index] != AVAILABLE){
		         if (key.equals(hashTable[index].getKey()))
		            found = true; // Key found
		         else             // Follow probe sequence
		            index = (index + 1) % hashTable.length; // Linear probing
		      }else { // Element in available state; skip it, but mark the first one encountered
		         // Save index of first element in available state
		         if (availableStateIndex == -1)
		            availableStateIndex = index;
		         index = (index + 1) % hashTable.length;   // Linear probing
		      } // end if
		   } // end while
		   // Assertion: Either key or null is found at hashTable[index]

		   if (found || (availableStateIndex == -1) )
		      return index;               // Index of either key or null
		   else
		      return availableStateIndex; // Index of an available element
	} // end linearProbe




	/**
	 * Increases the size of the hash table to a prime >= twice its old size.
	 * In doing so, this method must rehash the table entries.
	 */
	private void enlargeHashTable() {
		Entry<K, V>[] oldTable = hashTable;
		int oldSize = hashTable.length;
		int newSize = getNextPrime(oldSize + oldSize);
		checkSize(newSize); // Check that the prime size is not too large

		// The cast is safe because the new array contains null entries
		// increase the size of the array
		@SuppressWarnings("unchecked")
		Entry<K, V>[] tempTable = (Entry<K, V>[]) new Entry[newSize]; 
		
		// the internal table is now a larger array, but empty
		
		hashTable = tempTable;
		numberOfEntries = 0; // Reset number of dictionary entries, since
								// it will be incremented by add during rehash

		// Rehash dictionary entries from old array to the new and bigger array;
		// skip both null locations and removed entries
		// note use of add() to do this which rehashes keys
		
		for (int index = 0; index < oldSize; index++) {
			if ((oldTable[index] != null) && (oldTable[index] != AVAILABLE))
				add(oldTable[index].getKey(), oldTable[index].getValue());
		} 
	} 

	/**
	 * Returns true if lambda > MAX_LOAD_FACTOR for hash table;
	 * @return
	 */
	private boolean isHashTableTooFull() {
		return numberOfEntries > MAX_LOAD_FACTOR * hashTable.length;
	} // end isHashTableTooFull

	/**
	 * Returns a prime integer that is >= the given integer. 
	 * 
	 * Note this should be < MAX_SIZE but is not checked.
	 * @param anInteger
	 * @return the next prime number in the series of integers
	 */
	private int getNextPrime(int anInteger) {
		// if even, add 1 to make odd
		if (anInteger % 2 == 0) {
			anInteger++;
		} // end if

		// test odd integers
		while (!isPrime(anInteger)) {
			anInteger = anInteger + 2;
		} // end while

		return anInteger;
	} // end getNextPrime

	/**
	 * From Sedgewick
	 * Copyright © 2000–2017, Robert Sedgewick and Kevin Wayne. 
	 * 
	 * Checks to see if a number is prime.
	 * 
	 * Simpler code
	 * @param n
	 * @return true if a prime number
	 */
	private boolean isPrime(int n) {

		boolean isPrime = true;
		
		if (n < 2)
			isPrime = false;

		// try all possible factors of n
		// if if n has a factor, then it has one less than or equal to sqrt(n),
		// so for efficiency we only need to check factor <= sqrt(n) or
		// equivalently factor*factor <= n
		
		for (long factor = 2; factor * factor <= n; factor++) {

			// if factor divides evenly into n, n is not prime, so break out of loop
			if (n % factor == 0) {
				isPrime = false;
				break;
			}
		}

		return (isPrime);
	}

	// Ensures that the client requests a capacity
	// that is not too small or too large.
	private int checkCapacity(int capacity) {
		if (capacity < DEFAULT_CAPACITY)
			capacity = DEFAULT_CAPACITY;
		else if (capacity > MAX_CAPACITY)
			throw new IllegalStateException(
					"Attempt to create a dictionary " + "whose capacity is larger than " + MAX_CAPACITY);
		return capacity;
	} // end checkCapacity

	// Throws an exception if the hash table becomes too large.
	private void checkSize(int size) {
		if (size > MAX_SIZE)
			throw new IllegalStateException("Dictionary has become too large.");
	} // end checkSize


	protected final class Entry<K, V> {
		private K key;
		private V value;

		private Entry(K searchKey, V dataValue) {
			key = searchKey;
			value = dataValue;
		} // end constructor

		private K getKey() {
			return key;
		} // end getKey

		private V getValue() {
			return value;
		} // end getValue

		private void setValue(V newValue) {
			value = newValue;
		} // end setValue
	} // end Entry



} // end HashedDictionary
